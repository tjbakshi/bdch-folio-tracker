name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  DENO_VERSION: '1.40.x'

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ env.DENO_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Run Deno tests
      run: |
        echo "Running SEC parsing tests..."
        deno test --allow-net --allow-env supabase/functions/sec-extractor/parse_schedule_test.ts
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Run front-end tests
      run: npm test --if-present

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: |
        echo "üé≠ Starting Playwright E2E tests..."
        TEST_START_TIME=$(date +%s000) npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:5173
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        TEST_START_TIME: ${{ github.run_id }}
        CI: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ github.run_id }}
        path: |
          playwright-report/
          test-results/
          test-results/debug-*.png
        retention-days: 30
        
    - name: Generate test summary
      if: always()
      run: |
        echo "üìä Generating test summary..."
        if [ -d "test-results" ]; then
          echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Test artifacts uploaded as: playwright-report-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          TEST_COUNT=$(find test-results -name "*.xml" -o -name "*.json" | wc -l)
          echo "- Test result files: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Check for screenshots
          SCREENSHOT_COUNT=$(find test-results -name "*.png" | wc -l)
          if [ $SCREENSHOT_COUNT -gt 0 ]; then
            echo "- Debug screenshots captured: $SCREENSHOT_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Build Vite application
      run: |
        echo "Building front-end application..."
        npm run build
        echo "Copying API documentation files..."
        cp public/openapi.yaml dist/
        cp public/docs.html dist/
      env:
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}

    - name: Upload sourcemaps to Sentry
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Uploading sourcemaps to Sentry..."
        npx @sentry/cli sourcemaps upload --release="$(git rev-parse HEAD)" --project="bdc-analytics" ./dist
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Deploy Supabase Edge Functions
      run: |
        echo "Deploying Edge Functions..."
        supabase login --service-role --service-role-key "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
        supabase link --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}"
        supabase functions deploy sec-extractor --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}"
        supabase functions deploy bdc-api --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: Wait for function deployment
      run: |
        echo "Waiting for functions to be ready..."
        sleep 30

    - name: Run Edge Function Smoke Tests
      id: smoke-tests
      run: |
        echo "Running comprehensive smoke tests..."
        mkdir -p test-results
        deno run --allow-net --allow-env tests/smoke-test.ts 2>&1 | tee test-results/smoke-test-output.log
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SENTRY_DSN_EDGE: ${{ secrets.SENTRY_DSN_EDGE }}

    - name: Upload smoke test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: smoke-test-results
        path: test-results/
        retention-days: 7

    - name: Verify smoke test success
      run: |
        if [ -f "test-results/smoke-test-output.log" ]; then
          echo "Checking smoke test results..."
          if grep -q "All tests passed!" test-results/smoke-test-output.log; then
            echo "‚úÖ Smoke tests passed successfully"
          else
            echo "‚ùå Smoke tests failed - check the logs"
            cat test-results/smoke-test-output.log
            exit 1
          fi
        else
          echo "‚ùå Smoke test output not found"
          exit 1
        fi

    - name: Notify smoke test results to Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "channel": "#dev-alerts",
            "attachments": [
              {
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "title": "${{ job.status == 'success' && '‚úÖ Smoke Tests Passed' || '‚ùå Smoke Tests Failed' }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Test Results",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Artifacts>",
                    "short": true
                  }
                ],
                "text": "${{ job.status == 'success' && 'All edge function endpoints responding correctly with Sentry monitoring active.' || 'Edge function smoke tests failed. Check artifacts for detailed logs.' }}"
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Post detailed failure logs to Slack
      if: failure()
      run: |
        if [ -f "test-results/smoke-test-output.log" ]; then
          echo "Extracting failure details for Slack..."
          FAILURE_LOGS=$(head -20 test-results/smoke-test-output.log | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"#dev-alerts\",
              \"attachments\": [
                {
                  \"color\": \"danger\",
                  \"title\": \"üö® Smoke Test Failure Details\",
                  \"fields\": [
                    {
                      \"title\": \"First 20 lines of test output:\",
                      \"value\": \"\`\`\`${FAILURE_LOGS}\`\`\`\",
                      \"short\": false
                    }
                  ]
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

    - name: Deploy to Vercel
      id: vercel-deploy
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./

    - name: Run production smoke tests
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Running smoke tests against production deployment..."
        mkdir -p test-results/production
        deno run --allow-net --allow-env tests/quick-test.ts 2>&1 | tee test-results/production/prod-smoke-test.log
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    # Alternative: Deploy to Netlify (uncomment if using Netlify instead)
    # - name: Deploy to Netlify
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   uses: nwtgck/actions-netlify@v2.1
    #   with:
    #     publish-dir: './dist'
    #     production-branch: main
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     deploy-message: "Deploy from GitHub Actions"
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Run E2E tests
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Running end-to-end tests against deployed application..."
        # Add your E2E test commands here (e.g., Playwright, Cypress)
        # npm run test:e2e
      env:
        TEST_BASE_URL: https://your-app.vercel.app

    - name: Notify success to Slack
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#dev-status'
        text: |
          ‚úÖ *Deployment Successful*
          Branch: `${{ github.ref_name }}`
          Commit: `${{ github.sha }}`
          Live URL: https://your-app.vercel.app
          Edge Functions: ‚úÖ Deployed & Tested
          Smoke Tests: ‚úÖ Passed
          Test Reports: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify failure to Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#dev-alerts'
        text: |
          ‚ùå *Build/Deploy Failed*
          Branch: `${{ github.ref_name }}`
          Commit: `${{ github.sha }}`
          Failed Job: ${{ github.job }}
          Possible Causes:
          - Edge function deployment failed
          - Smoke tests failed
          - Frontend build issues
          - Sentry monitoring not working
          
          Artifacts: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Please check the logs and smoke test results.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}